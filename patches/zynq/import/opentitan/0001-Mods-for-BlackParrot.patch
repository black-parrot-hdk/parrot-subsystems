From 88076d5e91a063c06c6f06f3475dc42cdce8f21e Mon Sep 17 00:00:00 2001
From: Dan Petrisko <petrisko@cs.washington.edu>
Date: Fri, 23 Aug 2024 15:15:13 -0700
Subject: [PATCH] Patching for BlackParrot

---
 hw/dv/dpi/common/tcp_server/tcp_server.c |  11 +--
 hw/dv/dpi/dmidpi/dmidpi.c                | 132 +++++++++++++++++++++++++++++--
 hw/dv/dpi/dmidpi/dmidpi.h                |   2 +-
 hw/dv/dpi/dmidpi/dmidpi.sv               |   8 +-
 4 files changed, 137 insertions(+), 16 deletions(-)

diff --git a/hw/dv/dpi/common/tcp_server/tcp_server.c b/hw/dv/dpi/common/tcp_server/tcp_server.c
index 4d42665..98f50ad 100644
--- a/hw/dv/dpi/common/tcp_server/tcp_server.c
+++ b/hw/dv/dpi/common/tcp_server/tcp_server.c
@@ -112,8 +112,8 @@ static int start(struct tcp_server_ctx *ctx) {
     // create socket
     int sfd = socket(AF_INET, SOCK_STREAM, 0);
     if (sfd == -1) {
-    fprintf(stderr, "%s: Unable to create socket: %s (%d)\n", ctx->display_name,
-            strerror(errno), errno);
+        fprintf(stderr, "%s: Unable to create socket: %s (%d)\n",
+                ctx->display_name, strerror(errno), errno);
         return -1;
     }
 
@@ -152,8 +152,8 @@ static int start(struct tcp_server_ctx *ctx) {
 
     rv = bind(sfd, (struct sockaddr *)&addr, sizeof(addr));
     if (rv != 0) {
-    fprintf(stderr, "%s: Failed to bind socket: %s (%d)\n", ctx->display_name,
-            strerror(errno), errno);
+        fprintf(stderr, "%s: Failed to bind socket: %s (%d)\n",
+                ctx->display_name, strerror(errno), errno);
         return -1;
     }
 
@@ -199,7 +199,8 @@ static int client_tryaccept(struct tcp_server_ctx *ctx) {
 
     rv = fcntl(cfd, F_SETFL, O_NONBLOCK);
     if (rv != 0) {
-    fprintf(stderr, "%s: Unable to make client socket non-blocking: %s (%d)\n",
+        fprintf(stderr,
+                "%s: Unable to make client socket non-blocking: %s (%d)\n",
                 ctx->display_name, strerror(errno), errno);
         return -1;
     }
diff --git a/hw/dv/dpi/dmidpi/dmidpi.c b/hw/dv/dpi/dmidpi/dmidpi.c
index bce78f0..4d2b71e 100644
--- a/hw/dv/dpi/dmidpi/dmidpi.c
+++ b/hw/dv/dpi/dmidpi/dmidpi.c
@@ -82,9 +82,32 @@ struct dmi_sig_values {
     uint8_t dmi_rst_n;
 };
 
+enum dtm_state_t {
+    Ready = 0x0,
+    StartReq = 0x1,
+    SbaCfg = 0x2,
+    SendNPC_A = 0x3,
+    SendNPC_D = 0x4,
+    SendHiReq_A = 0x5,
+    SendHiReq_D = 0x6,
+    SendLoReq_A = 0x7,
+    SendLoReq_D = 0x8,
+    SendUnfreeze_A = 0x9,
+    SendUnfreeze_D = 0xA,
+    EndReq = 0xB
+};
+
+struct dtm_ctx {
+    uint8_t dmi_outstanding;
+    uint8_t dmi_captured;
+    uint8_t dmi_timeout;
+    enum dtm_state_t dtm_state;
+};
+
 struct dmidpi_ctx {
     struct tcp_server_ctx *sock;
     struct jtag_ctx jtag;
+    struct dtm_ctx dtm;
     struct dmi_sig_values sig;
 };
 
@@ -119,7 +142,7 @@ static void set_dr_data(struct dmidpi_ctx *ctx) {
  *
  * @param ctx dmidpi context object
  */
-static void issue_dmi_req(struct dmidpi_ctx *ctx) {
+static void issue_jtag_dmi_req(struct dmidpi_ctx *ctx) {
     ctx->jtag.dmi_outstanding = 1;
     ctx->sig.dmi_req_valid = 1;
     ctx->sig.dmi_req_addr = (ctx->jtag.dr_captured >> 34) & 0x7F;
@@ -214,7 +237,7 @@ static bool process_jtag_cmd(struct dmidpi_ctx *ctx, bool tdi, bool tms,
             // If a DMI read or write completes, write it out
             if ((ctx->jtag.ir_captured == DMIAccess) &&
                 ((ctx->jtag.dr_captured & 0x3) != 0)) {
-        issue_dmi_req(ctx);
+                issue_jtag_dmi_req(ctx);
                 return true;
             }
             return false;
@@ -281,7 +304,8 @@ static bool process_jtag_cmd(struct dmidpi_ctx *ctx, bool tdi, bool tms,
 static bool process_cmd_byte(struct dmidpi_ctx *ctx, char cmd) {
     /*
      * Documentation pointer:
-   * The remote_bitbang protocol implemented below is documented in the OpenOCD
+     * The remote_bitbang protocol implemented below is documented in the
+     * OpenOCD
      * source tree at doc/manual/jtag/drivers/remote_bitbang.txt, or online at
      * https://repo.or.cz/openocd.git/blob/HEAD:/doc/manual/jtag/drivers/remote_bitbang.txt
      */
@@ -316,7 +340,8 @@ static bool process_cmd_byte(struct dmidpi_ctx *ctx, char cmd) {
         printf("DMI DPI: Remote disconnected.\n");
         tcp_server_client_close(ctx->sock);
     } else {
-    fprintf(stderr,
+        fprintf(
+            stderr,
             "DMI DPI: Protocol violation detected: unsupported command %c\n",
             cmd);
         exit(1);
@@ -337,12 +362,89 @@ static void process_dmi_inputs(struct dmidpi_ctx *ctx) {
     }
     // Always ready for a resp
     ctx->sig.dmi_rsp_ready = 1;
-  if (ctx->sig.dmi_rsp_valid) {
+    if (ctx->sig.dmi_rsp_valid && ctx->jtag.dmi_outstanding) {
         ctx->jtag.dr_captured = (uint64_t)ctx->sig.dmi_rsp_data << 2;
         ctx->jtag.dr_captured |= (uint64_t)ctx->sig.dmi_rsp_resp & 0x3;
         // Clear req outstanding flag
         ctx->jtag.dmi_outstanding = 0;
     }
+
+    if (ctx->sig.dmi_rsp_valid && ctx->dtm.dmi_outstanding) {
+        // Clear req outstanding flag
+        ctx->dtm.dmi_outstanding = 0;
+        ctx->dtm.dmi_captured = 1;
+    }
+}
+
+/**
+ * Issues a DMI request and then waits to advance after a short timeout
+ *
+ * @param ctx dmidpi context object
+ */
+static void issue_dtm_req_and_advance(struct dmidpi_ctx *ctx, uint64_t address,
+                                      uint64_t data, enum dtm_state_t state) {
+    if (!ctx->dtm.dmi_outstanding && !ctx->dtm.dmi_captured) {
+        ctx->dtm.dmi_captured = 0;
+        ctx->dtm.dmi_outstanding = 1;
+        ctx->dtm.dmi_timeout = 10;
+        ctx->sig.dmi_req_valid = 1;
+        ctx->sig.dmi_req_addr = address;
+        ctx->sig.dmi_req_data = data;
+    }
+
+    if (ctx->dtm.dmi_captured && !(ctx->dtm.dmi_timeout--)) {
+        ctx->dtm.dmi_captured = 0;
+        ctx->dtm.dtm_state = state;
+    }
+}
+
+/**
+ * Process DTM request
+ * @param ctx dmidpi context object
+ */
+static void process_dtm_debug_req(struct dmidpi_ctx *ctx) {
+    int sbcs_write = 0;
+    sbcs_write |= (0x00 << 20);  // SBReadOnAddr
+    sbcs_write |= (0x02 << 17);  // SBAccess
+    sbcs_write |= (0x00 << 16);  // SBAutoIncrement
+    sbcs_write |= (0x00 << 15);  // SBReadOnData
+    switch (ctx->dtm.dtm_state) {
+        case Ready:
+            ctx->dtm.dtm_state = StartReq;
+            break;
+        case StartReq:
+            ctx->dtm.dtm_state = SbaCfg;
+            break;
+        case SbaCfg:
+            issue_dtm_req_and_advance(ctx, 0x38, sbcs_write, SendNPC_A);
+            break;
+        case SendNPC_A:
+            issue_dtm_req_and_advance(ctx, 0x39, 0x200010, SendNPC_D);
+            break;
+        case SendNPC_D:
+            issue_dtm_req_and_advance(ctx, 0x3C, 0x130800, SendHiReq_A);
+            break;
+        case SendHiReq_A:
+            issue_dtm_req_and_advance(ctx, 0x39, 0x30c000, SendHiReq_D);
+            break;
+        case SendHiReq_D:
+            issue_dtm_req_and_advance(ctx, 0x3C, 0x1, SendLoReq_A);
+            break;
+        case SendLoReq_A:
+            issue_dtm_req_and_advance(ctx, 0x39, 0x30c000, SendLoReq_D);
+            break;
+        case SendLoReq_D:
+            issue_dtm_req_and_advance(ctx, 0x3C, 0x0, SendUnfreeze_A);
+            break;
+        case SendUnfreeze_A:
+            issue_dtm_req_and_advance(ctx, 0x39, 0x200008, SendUnfreeze_D);
+            break;
+        case SendUnfreeze_D:
+            issue_dtm_req_and_advance(ctx, 0x3C, 0x0, EndReq);
+            break;
+        case EndReq:
+            break;
+    }
 }
 
 /**
@@ -358,7 +460,14 @@ static void update_dmi_state(struct dmidpi_ctx *ctx) {
 
     // If we are waiting for a previous transaction to complete, do not attempt
     // a new one
-  if (ctx->jtag.dmi_outstanding) {
+    if (ctx->jtag.dmi_outstanding || ctx->dtm.dmi_outstanding) {
+        return;
+    }
+
+    // If there is a debug req, we need to trigger debug entry
+    // TODO: Need to process JTAG commands here once we're done
+    if (ctx->dtm.dtm_state > Ready && ctx->dtm.dtm_state < EndReq) {
+        process_dtm_debug_req(ctx);
         return;
     }
 
@@ -412,7 +521,8 @@ void dmidpi_tick(void *ctx_void, svBit *dmi_req_valid,
                  svBitVecVal *dmi_req_op, svBitVecVal *dmi_req_data,
                  const svBit dmi_rsp_valid, svBit *dmi_rsp_ready,
                  const svBitVecVal *dmi_rsp_data,
-                 const svBitVecVal *dmi_rsp_resp, svBit *dmi_rst_n) {
+                 const svBitVecVal *dmi_rsp_resp, svBit *dmi_rst_n,
+                 const svBit debug_req) {
     struct dmidpi_ctx *ctx = (struct dmidpi_ctx *)ctx_void;
 
     if (!ctx) {
@@ -424,6 +534,13 @@ void dmidpi_tick(void *ctx_void, svBit *dmi_req_valid,
     ctx->sig.dmi_rsp_data = *dmi_rsp_data;
     ctx->sig.dmi_rsp_resp = *dmi_rsp_resp;
 
+    if (debug_req && ctx->dtm.dtm_state == Ready) {
+        ctx->dtm.dtm_state = StartReq;
+    }
+    if (!debug_req && ctx->dtm.dtm_state == EndReq) {
+        ctx->dtm.dtm_state = Ready;
+    }
+
     update_dmi_state(ctx);
 
     *dmi_req_valid = ctx->sig.dmi_req_valid;
@@ -433,3 +550,4 @@ void dmidpi_tick(void *ctx_void, svBit *dmi_req_valid,
     *dmi_rsp_ready = ctx->sig.dmi_rsp_ready;
     *dmi_rst_n = ctx->sig.dmi_rst_n;
 }
+
diff --git a/hw/dv/dpi/dmidpi/dmidpi.h b/hw/dv/dpi/dmidpi/dmidpi.h
index 64d9c76..8e8f2db 100644
--- a/hw/dv/dpi/dmidpi/dmidpi.h
+++ b/hw/dv/dpi/dmidpi/dmidpi.h
@@ -44,7 +44,7 @@ void dmidpi_tick(void *ctx_void, svBit *dmi_req_valid,
                  svBitVecVal *dmi_req_op, svBitVecVal *dmi_req_data,
                  const svBit dmi_resp_valid, svBit *dmi_resp_ready,
                  const svBitVecVal *dmi_resp_data,
-                 const svBitVecVal *dmi_resp_resp, svBit *dmi_reset_n);
+                 const svBitVecVal *dmi_resp_resp, svBit *dmi_reset_n, const svBit debug_req);
 
 #ifdef __cplusplus
 }  // extern "C"
diff --git a/hw/dv/dpi/dmidpi/dmidpi.sv b/hw/dv/dpi/dmidpi/dmidpi.sv
index 856a4b2..4757cac 100644
--- a/hw/dv/dpi/dmidpi/dmidpi.sv
+++ b/hw/dv/dpi/dmidpi/dmidpi.sv
@@ -18,7 +18,9 @@ module dmidpi #(
   output bit        dmi_rsp_ready,
   input  bit [31:0] dmi_rsp_data,
   input  bit [1:0]  dmi_rsp_resp,
-  output bit        dmi_rst_n
+  output bit        dmi_rst_n,
+
+  input bit         debug_req
 );
 
   import "DPI-C"
@@ -30,7 +32,7 @@ module dmidpi #(
                             output bit [1:0] dmi_req_op, output bit [31:0] dmi_req_data,
                             input bit dmi_rsp_valid, output bit dmi_rsp_ready,
                             input bit [31:0] dmi_rsp_data, input bit [1:0] dmi_rsp_resp,
-                            output bit dmi_rst_n);
+                            output bit dmi_rst_n, input bit debug_req);
 
   import "DPI-C"
   function void dmidpi_close(input chandle ctx);
@@ -49,7 +51,7 @@ module dmidpi #(
   always_ff @(posedge clk_i, negedge rst_ni) begin
     dmidpi_tick(ctx, dmi_req_valid, dmi_req_ready, dmi_req_addr, dmi_req_op,
                 dmi_req_data, dmi_rsp_valid, dmi_rsp_ready, dmi_rsp_data,
-                dmi_rsp_resp, dmi_rst_n);
+                dmi_rsp_resp, dmi_rst_n, debug_req);
   end
 
 endmodule
-- 
2.16.5

